/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package views;

import javax.swing.JOptionPane;
import java.sql.*;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Anaclita
 */
public class EditProductDialog extends javax.swing.JDialog {

    ResultSet rs = null;
    Statement stmt = null;
    PreparedStatement pstmt = null;

    private int productID = 0;
    private float price = 0f;
    /**
     * Creates new form AddCashierDialog
     */
    public EditProductDialog(java.awt.Frame parent, boolean modal, int productID) {
        super(parent, modal);
        initComponents();

        this.productID = productID;
        
        loadToComponents(productID);
        disabledFields();
        
        bgWaterType.add(rbAlkaline);
        bgWaterType.add(rbMineral);

        this.setVisible(true);
    }

    private void disabledFields() {
        cbContainerType.setEnabled(false);
        rbAlkaline.setEnabled(false);
        rbMineral.setEnabled(false);
    }
    
    private void loadToComponents(int productID) {
        try {
            stmt = DBConnect.getInstance().createStatement();

            String sql = "SELECT ContainerType, WaterType, Price FROM Product WHERE ProductID = " + productID;
            rs = stmt.executeQuery(sql);

            rs.next();
            cbContainerType.setSelectedItem(rs.getString("ContainerType"));
            
            String waterType = rs.getString("WaterType");
            
            if (waterType.equals("Alkaline")) {
                rbAlkaline.setSelected(true);
            } else if (waterType.equals("Mineral")) {
                rbMineral.setSelected(true);
            }

            this.price = rs.getFloat("Price");
            txtPrice.setText(String.valueOf(price) + "0");

            rs.close();
            stmt.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgWaterType = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnEdit = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        txtPrice = new javax.swing.JTextField();
        cbContainerType = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        rbAlkaline = new javax.swing.JRadioButton();
        rbMineral = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Georgia", 1, 22)); // NOI18N
        jLabel1.setText("EDIT PRODUCT");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel2.setText("Price");

        btnEdit.setBackground(new java.awt.Color(255, 255, 0));
        btnEdit.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        btnEdit.setText("EDIT");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        txtPrice.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        txtPrice.setText(".00");

        cbContainerType.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        cbContainerType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Container Type", "Water Jug", "Water Gallon", "10L" }));

        jLabel10.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel10.setText("Container Type");

        jLabel11.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel11.setText("Water Type");

        rbAlkaline.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        rbAlkaline.setSelected(true);
        rbAlkaline.setText("Alkaline");

        rbMineral.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        rbMineral.setText("Mineral");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(btnCancel)
                        .addGap(44, 44, 44)
                        .addComponent(btnEdit))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbAlkaline)
                                .addGap(18, 18, 18)
                                .addComponent(rbMineral))
                            .addComponent(cbContainerType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtPrice)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(jLabel1)))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(cbContainerType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(rbAlkaline)
                    .addComponent(rbMineral))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnEdit))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        String selectedContainerType = cbContainerType.getSelectedItem().toString();
        String selectedWaterType = "";

        if (rbAlkaline.isSelected()) {
            selectedWaterType = "Alkaline";
        } else if (rbMineral.isSelected()) {
            selectedWaterType = "Mineral";
        }

        String price = txtPrice.getText();

        if (cbContainerType.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Please select a container type!", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (price.equals(".00") || price.equals("") || price.equals("0")) {
            JOptionPane.showMessageDialog(null, "Price is empty!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int rowAffected = updateProductToDB(Float.parseFloat(price), productID);
            
            if (rowAffected > 0) {
                DefaultTableModel tblModel = (DefaultTableModel) ManagerProductPanel.tblProduct.getModel();

                String[] data = {selectedContainerType, selectedWaterType, "Php " + price};
                tblModel.setValueAt(data[0], ManagerProductPanel.tblProduct.getSelectedRow(), 0);
                tblModel.setValueAt(data[1], ManagerProductPanel.tblProduct.getSelectedRow(), 1);
                tblModel.setValueAt(data[2], ManagerProductPanel.tblProduct.getSelectedRow(), 2);
                
                System.out.println("Updated Product ID: " + productID);
                JOptionPane.showMessageDialog(null, "Product updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(null, "Product not updated successfully!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_btnEditActionPerformed

     private int updateProductToDB(float price, int productID) {
        int updatedRows = 0;
        try {
            String sql = "UPDATE product SET Price = ? "
                    + "WHERE ProductID = ?";

            pstmt = DBConnect.getInstance().prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

            pstmt.setFloat(1, price);
            pstmt.setInt(2, productID);

            int rowAffected = pstmt.executeUpdate();
            updatedRows = rowAffected;

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
        }

        return updatedRows;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgWaterType;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnEdit;
    private javax.swing.JComboBox<String> cbContainerType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton rbAlkaline;
    private javax.swing.JRadioButton rbMineral;
    private javax.swing.JTextField txtPrice;
    // End of variables declaration//GEN-END:variables
}
